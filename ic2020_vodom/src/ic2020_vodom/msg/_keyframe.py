"""autogenerated by genmsg_py from keyframe.msg. Do not edit."""
import roslib.message
import struct


class keyframe(roslib.message.Message):
  _md5sum = "0ffd2f798c68a348fd55754d5e039856"
  _type = "ic2020_vodom/keyframe"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 keyframe_num

# Rotation and Translation
float32[] rotation
float32[] translation

# Image
uint32 height
uint32 width
uint8[] im

# Depth Points
uint32 numberOf3DPoints
uint32 point_step #used for getting point in single row based off x and y coords
uint8[] points

# Shi Tomasi Corners
uint32 numCorn1
float32[] corn1 # relates this keyframe to last
uint8[] status # which ones are good

uint32 numCorn2
float32[] corn2 # corners found in this keyframe to relate to next

# SURF
uint32 numSURF
float32[] features
float32[] descBuffer
int32[] surfMatches # index of matches in previous keyframe, -1 means no match

# IMU
float32 imux
float32 imuy
float32 imuz

"""
  __slots__ = ['keyframe_num','rotation','translation','height','width','im','numberOf3DPoints','point_step','points','numCorn1','corn1','status','numCorn2','corn2','numSURF','features','descBuffer','surfMatches','imux','imuy','imuz']
  _slot_types = ['uint32','float32[]','float32[]','uint32','uint32','uint8[]','uint32','uint32','uint8[]','uint32','float32[]','uint8[]','uint32','float32[]','uint32','float32[]','float32[]','int32[]','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       keyframe_num,rotation,translation,height,width,im,numberOf3DPoints,point_step,points,numCorn1,corn1,status,numCorn2,corn2,numSURF,features,descBuffer,surfMatches,imux,imuy,imuz
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(keyframe, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.keyframe_num is None:
        self.keyframe_num = 0
      if self.rotation is None:
        self.rotation = []
      if self.translation is None:
        self.translation = []
      if self.height is None:
        self.height = 0
      if self.width is None:
        self.width = 0
      if self.im is None:
        self.im = ''
      if self.numberOf3DPoints is None:
        self.numberOf3DPoints = 0
      if self.point_step is None:
        self.point_step = 0
      if self.points is None:
        self.points = ''
      if self.numCorn1 is None:
        self.numCorn1 = 0
      if self.corn1 is None:
        self.corn1 = []
      if self.status is None:
        self.status = ''
      if self.numCorn2 is None:
        self.numCorn2 = 0
      if self.corn2 is None:
        self.corn2 = []
      if self.numSURF is None:
        self.numSURF = 0
      if self.features is None:
        self.features = []
      if self.descBuffer is None:
        self.descBuffer = []
      if self.surfMatches is None:
        self.surfMatches = []
      if self.imux is None:
        self.imux = 0.
      if self.imuy is None:
        self.imuy = 0.
      if self.imuz is None:
        self.imuz = 0.
    else:
      self.keyframe_num = 0
      self.rotation = []
      self.translation = []
      self.height = 0
      self.width = 0
      self.im = ''
      self.numberOf3DPoints = 0
      self.point_step = 0
      self.points = ''
      self.numCorn1 = 0
      self.corn1 = []
      self.status = ''
      self.numCorn2 = 0
      self.corn2 = []
      self.numSURF = 0
      self.features = []
      self.descBuffer = []
      self.surfMatches = []
      self.imux = 0.
      self.imuy = 0.
      self.imuz = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_I.pack(self.keyframe_num))
      length = len(self.rotation)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.rotation))
      length = len(self.translation)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.translation))
      _x = self
      buff.write(_struct_2I.pack(_x.height, _x.width))
      _x = self.im
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.numberOf3DPoints, _x.point_step))
      _x = self.points
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.numCorn1))
      length = len(self.corn1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.corn1))
      _x = self.status
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.numCorn2))
      length = len(self.corn2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.corn2))
      buff.write(_struct_I.pack(self.numSURF))
      length = len(self.features)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.features))
      length = len(self.descBuffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.descBuffer))
      length = len(self.surfMatches)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.surfMatches))
      _x = self
      buff.write(_struct_3f.pack(_x.imux, _x.imuy, _x.imuz))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (self.keyframe_num,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.rotation = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.translation = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.height, _x.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.im = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.numberOf3DPoints, _x.point_step,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.points = str[start:end]
      start = end
      end += 4
      (self.numCorn1,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.corn1 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.status = str[start:end]
      start = end
      end += 4
      (self.numCorn2,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.corn2 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.numSURF,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.features = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.descBuffer = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.surfMatches = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.imux, _x.imuy, _x.imuz,) = _struct_3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_I.pack(self.keyframe_num))
      length = len(self.rotation)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.rotation.tostring())
      length = len(self.translation)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.translation.tostring())
      _x = self
      buff.write(_struct_2I.pack(_x.height, _x.width))
      _x = self.im
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.numberOf3DPoints, _x.point_step))
      _x = self.points
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.numCorn1))
      length = len(self.corn1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.corn1.tostring())
      _x = self.status
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.numCorn2))
      length = len(self.corn2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.corn2.tostring())
      buff.write(_struct_I.pack(self.numSURF))
      length = len(self.features)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.features.tostring())
      length = len(self.descBuffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.descBuffer.tostring())
      length = len(self.surfMatches)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.surfMatches.tostring())
      _x = self
      buff.write(_struct_3f.pack(_x.imux, _x.imuy, _x.imuz))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.keyframe_num,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.rotation = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.translation = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 8
      (_x.height, _x.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.im = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.numberOf3DPoints, _x.point_step,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.points = str[start:end]
      start = end
      end += 4
      (self.numCorn1,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.corn1 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.status = str[start:end]
      start = end
      end += 4
      (self.numCorn2,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.corn2 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.numSURF,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.features = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.descBuffer = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.surfMatches = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 12
      (_x.imux, _x.imuy, _x.imuz,) = _struct_3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2I = struct.Struct("<2I")
_struct_3f = struct.Struct("<3f")
