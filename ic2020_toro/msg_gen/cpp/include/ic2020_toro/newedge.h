/* Auto-generated by genmsg_cpp for file /home/mlab/ros/HAWK-basestation/ic2020_toro/msg/newedge.msg */
#ifndef IC2020_TORO_MESSAGE_NEWEDGE_H
#define IC2020_TORO_MESSAGE_NEWEDGE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ic2020_toro
{
template <class ContainerAllocator>
struct newedge_ {
  typedef newedge_<ContainerAllocator> Type;

  newedge_()
  : prime_keyframe(0)
  , obs_keyframe(0)
  , rot()
  , trans()
  {
  }

  newedge_(const ContainerAllocator& _alloc)
  : prime_keyframe(0)
  , obs_keyframe(0)
  , rot(_alloc)
  , trans(_alloc)
  {
  }

  typedef uint32_t _prime_keyframe_type;
  uint32_t prime_keyframe;

  typedef uint32_t _obs_keyframe_type;
  uint32_t obs_keyframe;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _rot_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  rot;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _trans_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  trans;


  ROS_DEPRECATED uint32_t get_rot_size() const { return (uint32_t)rot.size(); }
  ROS_DEPRECATED void set_rot_size(uint32_t size) { rot.resize((size_t)size); }
  ROS_DEPRECATED void get_rot_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->rot; }
  ROS_DEPRECATED void set_rot_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->rot = vec; }
  ROS_DEPRECATED uint32_t get_trans_size() const { return (uint32_t)trans.size(); }
  ROS_DEPRECATED void set_trans_size(uint32_t size) { trans.resize((size_t)size); }
  ROS_DEPRECATED void get_trans_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->trans; }
  ROS_DEPRECATED void set_trans_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->trans = vec; }
private:
  static const char* __s_getDataType_() { return "ic2020_toro/newedge"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "4dc59ec3b0c54addb13a6d290b0c5b3c"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# Index of Keyframes\n\
uint32 prime_keyframe\n\
uint32 obs_keyframe\n\
\n\
# Rotation and Translation\n\
float32[] rot\n\
float32[] trans\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, prime_keyframe);
    ros::serialization::serialize(stream, obs_keyframe);
    ros::serialization::serialize(stream, rot);
    ros::serialization::serialize(stream, trans);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, prime_keyframe);
    ros::serialization::deserialize(stream, obs_keyframe);
    ros::serialization::deserialize(stream, rot);
    ros::serialization::deserialize(stream, trans);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(prime_keyframe);
    size += ros::serialization::serializationLength(obs_keyframe);
    size += ros::serialization::serializationLength(rot);
    size += ros::serialization::serializationLength(trans);
    return size;
  }

  typedef boost::shared_ptr< ::ic2020_toro::newedge_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ic2020_toro::newedge_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct newedge
typedef  ::ic2020_toro::newedge_<std::allocator<void> > newedge;

typedef boost::shared_ptr< ::ic2020_toro::newedge> newedgePtr;
typedef boost::shared_ptr< ::ic2020_toro::newedge const> newedgeConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ic2020_toro::newedge_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ic2020_toro::newedge_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ic2020_toro

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ic2020_toro::newedge_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ic2020_toro::newedge_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ic2020_toro::newedge_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4dc59ec3b0c54addb13a6d290b0c5b3c";
  }

  static const char* value(const  ::ic2020_toro::newedge_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4dc59ec3b0c54addULL;
  static const uint64_t static_value2 = 0xb13a6d290b0c5b3cULL;
};

template<class ContainerAllocator>
struct DataType< ::ic2020_toro::newedge_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ic2020_toro/newedge";
  }

  static const char* value(const  ::ic2020_toro::newedge_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ic2020_toro::newedge_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Index of Keyframes\n\
uint32 prime_keyframe\n\
uint32 obs_keyframe\n\
\n\
# Rotation and Translation\n\
float32[] rot\n\
float32[] trans\n\
\n\
";
  }

  static const char* value(const  ::ic2020_toro::newedge_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ic2020_toro::newedge_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.prime_keyframe);
    stream.next(m.obs_keyframe);
    stream.next(m.rot);
    stream.next(m.trans);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct newedge_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ic2020_toro::newedge_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ic2020_toro::newedge_<ContainerAllocator> & v) 
  {
    s << indent << "prime_keyframe: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.prime_keyframe);
    s << indent << "obs_keyframe: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.obs_keyframe);
    s << indent << "rot[]" << std::endl;
    for (size_t i = 0; i < v.rot.size(); ++i)
    {
      s << indent << "  rot[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rot[i]);
    }
    s << indent << "trans[]" << std::endl;
    for (size_t i = 0; i < v.trans.size(); ++i)
    {
      s << indent << "  trans[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.trans[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // IC2020_TORO_MESSAGE_NEWEDGE_H

